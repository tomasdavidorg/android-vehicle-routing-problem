// version 6.2.0 of OptaPlanner requires JavaBeans libraries repacked into jar file
/*
import java.nio.channels.Channels
import java.nio.channels.ReadableByteChannel

String OPENBEANS_URL = "https://openbeans.googlecode.com/files/openbeans-1.0.jar";
String JARJAR_URL = "https://jarjar.googlecode.com/files/jarjar-1.4.jar";

String JAVABEANS = "javabeans.jar"
String OPENBEANS = "openbeans.jar";
String JARJAR = "jarjar.jar";
String RULES = "rule.txt";
String LIBS_DIR = "app/libs/";

String RULE = "rule com.googlecode.openbeans.** java.beans.@1";
String COMMAND = "java -jar " + JARJAR + " process " + RULES + " " + OPENBEANS + " " + JAVABEANS;


void downloadJar(String url, String path) {
    File file = new File(path);
    if (!file.exists()) {
        URL fileUrl = new URL(url);
        ReadableByteChannel rbc = Channels.newChannel(fileUrl.openStream());
        FileOutputStream fos = new FileOutputStream(path);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
    }
}

void deleteFile(String path) {
    File file = new File(path);
    if (file.exists()) {
        file.delete()
    }
}

task checkLibsDir {
    description = "Checks if " + LIBS_DIR + " directory exists.";
    group = "Preparation";
}

checkLibsDir << {
    logger.info("Checking directory: '{}'", LIBS_DIR);
    File libs = new File(LIBS_DIR);
    if (!libs.exists()) {
        libs.mkdir();
    }
}

task deleteJarJar {
    description = "Deletes " + JARJAR + " file.";
    group = "Preparation";
}

deleteJarJar << {
    logger.info("Deleting file: '{}'", JARJAR);
    deleteFile(LIBS_DIR + JARJAR);
}

task deleteOpenBeans {
    description = "Deletes " + OPENBEANS + " file.";
    group = "Preparation";
}

deleteOpenBeans << {
    logger.info("Deleting file: '{}'", OPENBEANS);
    deleteFile(LIBS_DIR + OPENBEANS);
}

task deleteJavaBeans {
    description = "Deletes " + JAVABEANS + " file.";
    group = "Preparation";
}

deleteJavaBeans << {
    logger.info("Deleting file: '{}'", JAVABEANS);
    deleteFile(LIBS_DIR + JAVABEANS);
}

task deleteRule {
    description = "Deletes " + RULES + " file.";
    group = "Preparation";
}

deleteRule << {
    logger.info("Deleting file: '{}'", RULES);
    deleteFile(LIBS_DIR + RULES);
}

task downloadJarJar {
    description = "Downloads " + JARJAR + " file.";
    group = "Preparation";
}

downloadJarJar << {
    logger.info("Downloading file: '{}' to '{}'", JARJAR, LIBS_DIR);
    downloadJar(JARJAR_URL, LIBS_DIR + JARJAR);
}

task dowloadOpenBeans {
    description = "Downloads " + OPENBEANS + " file.";
    group = "Preparation";
}

dowloadOpenBeans << {
    logger.info("Downloading file: '{}' to '{}'", OPENBEANS, LIBS_DIR);
    downloadJar(OPENBEANS_URL, LIBS_DIR + OPENBEANS);
}

task createRuleFile {
    description = "Creates " + RULES + " file.";
    group = "Preparation";
}

createRuleFile << {
    File rule = new File(LIBS_DIR + RULES);
    if (!rule.exists()) {
        logger.info("Creating file: '{}' in '{}'", RULES, LIBS_DIR);
        PrintWriter writer = new PrintWriter(rule, "UTF-8");
        logger.info("Writing rule: '{}' to '{}'", RULE, RULES);
        writer.println(RULE);
        writer.close();
    }
}

task repackOpenBeans {
    description = "Repacks " + OPENBEANS + " file to " + JAVABEANS + " file.";
    group = "Preparation";
}

repackOpenBeans << {
    logger.info("Running command: '{}' in '{}'", COMMAND, LIBS_DIR);
    Runtime.getRuntime().exec(COMMAND, null, new File(LIBS_DIR)).waitFor();
}

task editDx {
    description = "Add --core-library flag to dx file";
    group = "Preparation"
}

editDx << {
    logger.info("Reading properties: getting sdk.dir");
    Properties properties = new Properties();
    properties.load(project.rootProject.file('local.properties').newDataInputStream());
    String dxLocation = properties.getProperty('sdk.dir') + "/build-tools/";
    dxLocation += properties.getProperty('build-tools.version') + "/dx";

    logger.info("Reading file: dx");
    String line;
    StringBuilder dx = new StringBuilder();
    BufferedReader file = new BufferedReader(new FileReader(dxLocation));
    while ((line = file.readLine()) != null) {
        dx.append(line).append(String.format("%n"))
    }

    logger.info("Adding parameter: --core-library");
    String oldDx = dx.toString();
    if (!oldDx.contains("--core-library \"\$@\"")) {
        String newDx = oldDx.replace("\"\$@\"", "--core-library \"\$@\"");

        logger.info("Writing changes to file: dx");
        FileOutputStream fos = new FileOutputStream(dxLocation);
        fos.write(newDx.getBytes());
        fos.close();
    }
}

createRuleFile.dependsOn checkLibsDir
downloadJarJar.dependsOn checkLibsDir
dowloadOpenBeans.dependsOn checkLibsDir
repackOpenBeans.dependsOn deleteJavaBeans, createRuleFile, downloadJarJar, dowloadOpenBeans
repackOpenBeans.finalizedBy deleteJarJar, deleteOpenBeans, deleteRule
*/

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        maven {
            url "https://repository.jboss.org/nexus/content/groups/public/"
        }
    }
}
